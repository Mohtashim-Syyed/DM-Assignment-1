#include<stdio.h>
int value(int,int);
void umat(int a[10][10],int n)
{
 int i,j,k;
 for(k=1;k<=n;k++)
  for(i=1;i<=n;i++)
   for(j=1;j<=n;j++)
    if(i==j)
     a[i][j]=0;
    else
     a[i][j]=value(a[i][j],a[i][k]+a[k][j]);
}
int value(int a,int b)
{
 if(a<b)
  return(a);
 else
  return(b);
}
void main()
{
 int a[10][10],i,j,n,a1,a2,a3,a4;;
 printf("\n Enter the number of vertices:");
 scanf("%d",&n);
 printf("\n Enter the number of edges:\n");
 scanf("%d",&a2);
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
   a[i][j]=999;
 }
 for(i=1;i<=a2;i++)
 {
  printf("\n Enter the end vertices of edge%d with its weight \n",i);
  scanf("%d%d%d",&a3,&a4,&a1);
  a[a3][a4]=a1;
 }
 printf("\n Matrix of input data:\n");
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
   printf("%d \t",a[i][j]);
  printf("\n");
 }
 umat(a,n);
 printf("\n Transitive closure:\n");
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
   printf("%d \t",a[i][j]);
  printf("\n");
 }
 printf("\n The shortest paths are:\n");
 for(i=1;i<=n;i++)
  for(j=1;j<=n;j++)
  {
   if(i!=j)
    printf("\n <%d,%d>=%d",i,j,a[i][j]);
  }
}
Â© 2020 GitHub, Inc.
